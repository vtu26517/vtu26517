from collections import deque
def bfs_shortest_path(graph, start, goal):
 visited = set()
 queue = deque([[start]])
 if start == goal:
 return [start]
 while queue:
 path = queue.popleft()
 node = path[-1]
 if node not in visited:
 for neighbor in graph[node]:
 new_path = list(path)
 new_path.append(neighbor)
 queue.append(new_path)
 if neighbor == goal:
 return new_path
 visited.add(node)
 return None
# Example graph representing intersections and roads
city_graph = {
 'A': ['B', 'C'],
 'B': ['A', 'D', 'E'],
 'C': ['A', 'F'],
 'D': ['B'],
 'E': ['B', 'F'],
 'F': ['C', 'E']
}
# Test
start = 'A'
goal = 'F'
shortest_path = bfs_shortest_path(city_graph, start, goal)
print("Shortest path from", start, "to", goal, "is:", shortest_path
