def print_board(board):
 for row in board:
 print(row)
 print()
def check_winner(board):
 for i in range(3):
 if board[i][0] == board[i][1] == board[i][2] != '_':
 return board[i][0]
 if board[0][i] == board[1][i] == board[2][i] != '_':
 return board[0][i]
 if board[0][0] == board[1][1] == board[2][2] != '_':
 return board[0][0]
 if board[0][2] == board[1][1] == board[2][0] != '_':
 return board[0][2]
 return None
def is_full(board):
 return all(cell != '_' for row in board for cell in row)
def minimax(board, is_maximizing):
 winner = check_winner(board)
 if winner == 'X':
 return 1
 elif winner == 'O':
 return -1
 elif is_full(board):
 return 0
 if is_maximizing:
 best_score = -float('inf')
 for i in range(3):
 for j in range(3):
 if board[i][j] == '_':
 board[i][j] = 'X'
 score = minimax(board, False)
 board[i][j] = '_
best_score = max(score, best_score)
 return best_score
 else:
 best_score = float('inf')
 for i in range(3):
 for j in range(3):
 if board[i][j] == '_':
 board[i][j] = 'O'
 score = minimax(board, True)
 board[i][j] = '_'
 best_score = min(score, best_score)
 return best_score
def best_move(board):
 best_score = -float('inf')
 move = None
 for i in range(3):
 for j in range(3):
 if board[i][j] == '_':
 board[i][j] = 'X'
 score = minimax(board, False)
 board[i][j] = '_'
 if score > best_score:
 best_score = score
 move = (i, j)
 return move
Sample Input: 
board = [
 ['X', 'O', 'X'],
 ['', 'O', ''],
 ['', '', '_']
]
print("Current Board:")
print_board(board)
move = best_move(board)
print(f"AI recommends move at position: {move}")
